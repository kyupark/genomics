//============================================================================
// Name        : TeaQ.cpp
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

// #include <iostream>
//#include <bwtaln.h>
#include "ReadClipper.hpp"


using namespace TeaQ;
using namespace std;

int main(int argc, char *argv[]) {
	if (argc < 1) {
		cerr << "usage:\t" << argv[0] << " <bam file name> <ref family file> <minimum read length (default: 5)> <minimum base gap (default: 2)> <cap3_options (default = -i 21 -j 31 -o 16 -s 251 -p 70)>" << endl;
		cerr << "\t ref family file (default: /home/el114/kyu/data/bwa_idx/human_youngTE_revisedPolyA.fa)" << endl;
		return 1;
	}
	string bam_file_name = argv[1]; // string bam_file_name = "/home/el114/kyu/data/test.bam";
	string ref_file_name = "/home/el114/kyu/data/bwa_idx/human_youngTE_revisedPolyA.fa";
	int64_t minimum_read_length = 5;
	int64_t minimum_base_gap = 2;
	string cap3_options = "-i 21 -j 31 -o 16 -s 251 -p 70";

	istringstream ss;

	if (argc >= 2) {
		ss(argv[2]);
		if (!(ss >> ref_file_name)) cerr << "Invalid <ref file name>";
	}
	if (argc >= 3) {
		ss(argv[3]);
		if (!(ss >> minimum_read_length)) cerr << "Invalid <minimum read length>";
	}
	if (argc >= 4) {
		ss(argv[4]);
		if (!(ss >> minimum_base_gap)) cerr << "Invalid <minimum base gap>";
	}
	if (argc >= 5) {
		ss.clear();
		for (int i=5; i < argc; ++i) {
			ss << argv[i] << " ";
		}
		if (!(ss >> cap3_options)) cerr << "Invalid <cap3 options>";
	}

	ReadClipper::clip_filter_contiggen(
			bam_file_name,
			ref_file_name,
			minimum_read_length,
			minimum_base_gap,
			cap3_options);

	return 0;
}
